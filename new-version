import type React from "react"
import { useTheme } from "../contexts/ThemeContext"
import { ServiceGrid } from "./ServiceGrid"
import { DnsRecords } from "./DnsRecords"
import { DdosProtection } from "./DdosProtection"
import { L7Cdn } from "./L7Cdn"

const Dashboard: React.FC = () => {
  const { theme, toggleTheme } = useTheme()

  // Sample data (replace with your actual data or state management)
  const providers = [
    {
      name: "SingTel",
      services: [
        { name: "Internet Banking", code: "IBSB", status: "healthy" },
        { name: "Mobile Banking", code: "MBS", status: "healthy" },
      ],
    },
    {
      name: "StarHub",
      services: [
        { name: "Internet Banking", code: "IBSH", status: "warning" },
        { name: "Mobile Banking", code: "MBS", status: "error" },
      ],
    },
  ]

  const dnsRecords = [
    { name: "example.com", code: "A", status: "healthy" },
    { name: "api.example.com", code: "CNAME", status: "warning" },
  ]

  const ddosServices = [
    { name: "DDoS Protection 1", enabled: true, status: "healthy" },
    { name: "DDoS Protection 2", enabled: false, status: "warning" },
  ]

  const cdnServices = [
    { name: "CDN 1", provider: "Akamai", status: "healthy" },
    { name: "CDN 2", provider: "Cloudflare", status: "warning" },
  ]

  const activeCdn = [
    { name: "Main Website", provider: "Akamai", status: "healthy" },
    { name: "API", provider: "Cloudflare", status: "healthy" },
  ]

  return (
    <div className={`min-h-screen ${theme === "dark" ? "bg-gray-900 text-white" : "bg-white text-black"}`}>
      <header className={`border-b ${theme === "dark" ? "border-gray-700" : "border-gray-200"}`}>
        <div className="container mx-auto py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold">DNS Management Dashboard</h1>
          <button
            onClick={toggleTheme}
            className={`px-4 py-2 rounded ${theme === "dark" ? "bg-gray-700 text-white" : "bg-gray-200 text-black"}`}
          >
            Toggle {theme === "light" ? "Dark" : "Light"} Mode
          </button>
        </div>
      </header>
      <main className="container mx-auto py-8 space-y-8">
        <section>
          <h2 className="text-xl font-semibold mb-4">Service Providers</h2>
          <ServiceGrid providers={providers} />
        </section>
        <div className="grid gap-8 lg:grid-cols-2">
          <section>
            <h2 className="text-xl font-semibold mb-4">DNS Records</h2>
            <DnsRecords records={dnsRecords} />
          </section>
          <section>
            <h2 className="text-xl font-semibold mb-4">DDoS Protection</h2>
            <DdosProtection services={ddosServices} />
          </section>
        </div>
        <section>
          <h2 className="text-xl font-semibold mb-4">L7 CDN</h2>
          <L7Cdn cdnServices={cdnServices} activeCdn={activeCdn} />
        </section>
      </main>
    </div>
  )
}

export default Dashboard







import type React from "react"
import { useTheme } from "../contexts/ThemeContext"
import { StatusBadge } from "./StatusBadge"

interface DdosService {
  name: string
  enabled: boolean
  status: "healthy" | "warning" | "error"
}

interface DdosProtectionProps {
  services: DdosService[]
}

export const DdosProtection: React.FC<DdosProtectionProps> = ({ services }) => {
  const { theme } = useTheme()

  return (
    <div
      className={`rounded-lg border ${theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}
    >
      <ul className={`divide-y ${theme === "dark" ? "divide-gray-700" : "divide-gray-200"}`}>
        {services.map((service) => (
          <li key={service.name} className="flex items-center justify-between p-4">
            <div>
              <p className="font-medium">{service.name}</p>
              <p className={`text-sm ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>
                {service.enabled ? "Enabled" : "Disabled"}
              </p>
            </div>
            <StatusBadge status={service.status} />
          </li>
        ))}
      </ul>
    </div>
  )
}






import type React from "react"
import { useTheme } from "../contexts/ThemeContext"
import { StatusBadge } from "./StatusBadge"

interface DnsRecord {
  name: string
  code: string
  status: "healthy" | "warning" | "error"
}

interface DnsRecordsProps {
  records: DnsRecord[]
}

export const DnsRecords: React.FC<DnsRecordsProps> = ({ records }) => {
  const { theme } = useTheme()

  return (
    <div
      className={`rounded-lg border ${theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}
    >
      <ul className={`divide-y ${theme === "dark" ? "divide-gray-700" : "divide-gray-200"}`}>
        {records.map((record) => (
          <li key={record.name} className="flex items-center justify-between p-4">
            <div>
              <p className="font-medium">{record.name}</p>
              <p className={`text-sm ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>{record.code}</p>
            </div>
            <StatusBadge status={record.status} />
          </li>
        ))}
      </ul>
    </div>
  )
}







import type React from "react"
import { useTheme } from "../contexts/ThemeContext"
import { StatusBadge } from "./StatusBadge"

interface CdnService {
  name: string
  provider: string
  status: "healthy" | "warning" | "error"
}

interface L7CdnProps {
  cdnServices: CdnService[]
  activeCdn: CdnService[]
}

export const L7Cdn: React.FC<L7CdnProps> = ({ cdnServices, activeCdn }) => {
  const { theme } = useTheme()

  return (
    <div className="grid gap-6 lg:grid-cols-2">
      <div
        className={`rounded-lg border ${theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}
      >
        <h3 className={`p-4 font-semibold ${theme === "dark" ? "bg-gray-700" : "bg-gray-100"}`}>CDN Services</h3>
        <ul className={`divide-y ${theme === "dark" ? "divide-gray-700" : "divide-gray-200"}`}>
          {cdnServices.map((service) => (
            <li key={service.name} className="flex items-center justify-between p-4">
              <div>
                <p className="font-medium">{service.name}</p>
                <p className={`text-sm ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>{service.provider}</p>
              </div>
              <StatusBadge status={service.status} />
            </li>
          ))}
        </ul>
      </div>
      <div
        className={`rounded-lg border ${theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}
      >
        <h3 className={`p-4 font-semibold ${theme === "dark" ? "bg-gray-700" : "bg-gray-100"}`}>Active CDN</h3>
        <ul className={`divide-y ${theme === "dark" ? "divide-gray-700" : "divide-gray-200"}`}>
          {activeCdn.map((cdn) => (
            <li key={cdn.name} className="flex items-center justify-between p-4">
              <div>
                <p className="font-medium">{cdn.name}</p>
                <p className={`text-sm ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>{cdn.provider}</p>
              </div>
              <StatusBadge status={cdn.status} />
            </li>
          ))}
        </ul>
      </div>
    </div>
  )
}





import type React from "react"
import { useTheme } from "../contexts/ThemeContext"
import { StatusBadge } from "./StatusBadge"

interface Service {
  name: string
  code: string
  status: "healthy" | "warning" | "error"
}

interface ServiceProvider {
  name: string
  services: Service[]
}

interface ServiceGridProps {
  providers: ServiceProvider[]
}

export const ServiceGrid: React.FC<ServiceGridProps> = ({ providers }) => {
  const { theme } = useTheme()

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
      {providers.map((provider) => (
        <div
          key={provider.name}
          className={`overflow-hidden rounded-lg border ${theme === "dark" ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}
        >
          <div className={`p-4 ${theme === "dark" ? "bg-gray-700" : "bg-gray-100"}`}>
            <h3 className="text-lg font-semibold">{provider.name}</h3>
          </div>
          <ul className={`divide-y ${theme === "dark" ? "divide-gray-700" : "divide-gray-200"}`}>
            {provider.services.map((service) => (
              <li key={service.code} className="flex items-center justify-between p-4">
                <div>
                  <p className="font-medium">{service.name}</p>
                  <p className={`text-sm ${theme === "dark" ? "text-gray-400" : "text-gray-500"}`}>{service.code}</p>
                </div>
                <StatusBadge status={service.status} />
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  )
}




import type React from "react"
import { useTheme } from "../contexts/ThemeContext"

interface StatusBadgeProps {
  status: "healthy" | "warning" | "error"
}

export const StatusBadge: React.FC<StatusBadgeProps> = ({ status }) => {
  const { theme } = useTheme()

  const getStatusColor = () => {
    switch (status) {
      case "healthy":
        return theme === "dark" ? "bg-green-700 text-green-100" : "bg-green-100 text-green-800"
      case "warning":
        return theme === "dark" ? "bg-yellow-700 text-yellow-100" : "bg-yellow-100 text-yellow-800"
      case "error":
        return theme === "dark" ? "bg-red-700 text-red-100" : "bg-red-100 text-red-800"
    }
  }

  return <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor()}`}>{status}</span>
}



